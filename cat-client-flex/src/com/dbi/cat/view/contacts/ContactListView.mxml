<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" 
	xmlns:contacts="com.dbi.cat.view.contacts.*" 
	xmlns:components="com.dbi.cat.view.components.*"
	creationComplete="init()">
	<mx:Script>
		<![CDATA[
			import com.dbi.cat.event.ContactEvent;
			import mx.binding.utils.ChangeWatcher;
			import com.dbi.cat.common.constants.EntryPointType;
			import com.dbi.cat.common.vo.ClientVO;
			import com.dbi.controls.AdvancedComboBox;
			import mx.collections.ArrayCollection;
			import com.dbi.cat.common.vo.ContactTagVO;
			import com.dbi.util.DateUtil;
			import mx.controls.dataGridClasses.DataGridColumn;
			import com.dbi.cat.common.vo.ContactVO;
			
			[Bindable]
			public var clients:ArrayCollection;
			
			[Bindable]
			public var contacts:ArrayCollection;
			
			[Bindable]
			public var selectedFilterContacts:ArrayCollection;
			
			[Bindable]
			public var filterLabel:String;
			
			private var _filterContactTags:ArrayCollection;
			public function get filterContactTags():ArrayCollection
			{
				return _filterContactTags;
			}
			public function set filterContactTags(value:ArrayCollection):void
			{
				_filterContactTags = value;
				
				// Clear selected items
				Contacts.selectedIndex = -1;
				dispatchEvent(new Event("filterUpdate"));
			}
			
			private function init():void
			{
				ChangeWatcher.watch(Contacts, "selectedItems", selectedContactsChanged);
				
				// Do initial filter
				doFilter();
			}
			
			private function selectedContactsChanged(e:Event):void
			{
				var event:ContactEvent = new ContactEvent(ContactEvent.SELECT_CONTACTS);
				event.contacts = new ArrayCollection(Contacts.selectedItems);
				dispatchEvent(event);
			}
			private function createDateLabel(contact:ContactVO, column:DataGridColumn):String
			{
				return DateUtil.formatDate(contact.createDate);
			}
			private function tagListLabel(contact:ContactVO, column:DataGridColumn):String
			{
				var ret:String = "";
				for each (var tag:ContactTagVO in contact.contactTags)
				{
					if (ret.length > 0)
						ret += ", ";
					ret += tag.tag;
				}
				return ret;
			}
			private function openTagFilter():void
			{
				dispatchEvent(new ContactEvent(ContactEvent.OPEN_CONTACT_TAG_FILTER));
			}
			private function doFilter():void
			{
				var event:ContactEvent = new ContactEvent(ContactEvent.FILTER_CONTACTS);
				event.clientId = Client.selectedItem.clientId;
				event.contactType = ContactType.selectedLabel;
				dispatchEvent(event);
				
				dispatchEvent(new Event("filterUpdate"));
				
				// Clear selected items
				Contacts.selectedIndex = -1;
			}
			
			[Bindable(event="filterUpdate")]
			private function get tagLabel():String
			{
				var ret:String = "Select (0)";
				if (filterContactTags != null)
				{
					ret = "Select (" + filterContactTags.length + ")";
				}
				return ret;
			}
		]]>
	</mx:Script>
	<mx:Canvas width="100%" height="100%">
		<mx:HBox width="100%" verticalAlign="middle"
			top="5">
			<mx:Label text="Client:"/>
			<components:FormattedComboBox
				id="Client"
				top="4" left="55"
				bindingBehavior="{AdvancedComboBox.BINDING_BEHAVIOR_FIRST}"
				labelField="name"
				dataProvider="{clients}"
				change="doFilter()" />
			<mx:Label text="Type:" />
			<mx:ComboBox id="ContactType"
				dataProvider="{EntryPointType.getAllTypes()}"
				change="doFilter()" />
			<mx:Label text="Tags" />
			<mx:Button label="{tagLabel}"
				click="openTagFilter()" />
			<mx:Spacer width="100%" />
			<mx:Label text="{filterLabel}" />
		</mx:HBox>
		<mx:DataGrid id="Contacts"
			width="100%" height="100%" top="30"
			dataProvider="{contacts}"
			allowMultipleSelection="true">
			<mx:columns>
				<mx:DataGridColumn headerText="Contact" dataField="address" width="150" />
				<mx:DataGridColumn headerText="Date Added" labelFunction="createDateLabel" width="80" />
				<mx:DataGridColumn headerText="Tags" dataField="tagListLabel" />
			</mx:columns>
		</mx:DataGrid>
	</mx:Canvas>
</mx:Canvas>
