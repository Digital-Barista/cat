<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="506" height="270"
	layout="absolute" showCloseButton="true"
	close="cancel()"
	title="{isNewUser ? 'Create User' : 'Edit User'}" xmlns:vo="com.dbi.cat.vo.*">
	<mx:Script>
		<![CDATA[
			import com.dbi.controls.CustomMessage;
			import mx.validators.Validator;
			import com.dbi.cat.common.constants.Roles;
			import com.dbi.cat.common.vo.RoleVO;
			import com.dbi.cat.common.vo.UserVO;
			import mx.core.UIComponent;
			import mx.collections.IViewCursor;
			import mx.managers.DragManager;
			import mx.events.DragEvent;
			import com.dbi.cat.event.NavigationEvent;
			import mx.collections.ArrayCollection;
			import mx.validators.EmailValidator;
			import com.dbi.cat.event.UserEvent;
			import flash.events.MouseEvent;
			
			public var currentUser:UserVO;
			
			private var _editUser:UserVO;
			[Bindable]
			public function get editUser():UserVO
			{
				return _editUser;
			}
			public function set editUser(user:UserVO):void
			{
				_editUser = user;
				filterAvailableRoles();
			}
			
			private function get isNewUser():Boolean
			{
				return editUser == null || isNaN(editUser.primaryKey);
			}
			
			[Bindable]
			private var availableRoles:ArrayCollection = 
				new ArrayCollection([Roles.ADMIN, Roles.CLIENT, Roles.ACCOUNT_MANAGER]);
			
			private function save():void
			{
				var errors:ArrayCollection = new ArrayCollection();
					
				editUser.emailAddress = EmailAddress.text;
				editUser.name = EmailAddress.text;
				editUser.isActive = IsActive.selected;
				editUser.roles = currentUser.roles;
				
				if(Password.text != "" && Password.text == ConfirmPassword.text)
				{
					editUser.password = Password.text;
				}
				
				if (isNewUser)
				{
					if (Password.text.length == 0 ||
						ConfirmPassword.text.length == 0)
						errors.addItem("Password and confirm password are required");
					else if (Password.text != ConfirmPassword.text)
						errors.addItem("The password and confirm password do not match");
				}
					
					
				if (errors.length == 0)
				{
					var userEvent:UserEvent = new UserEvent(UserEvent.SAVE_USER);
					userEvent.user = editUser;
					dispatchEvent(userEvent);
				}
				else
				{
					var message:String = "";
					for each (var e:String in errors)
						message += e + "\n";
					CustomMessage.show(message);
				}
			}
			private function cancel():void
			{
				dispatchEvent(new UserEvent(UserEvent.CANCEL_EDIT));
			}
			private function onDragEnter(e:DragEvent):void
			{
				e.preventDefault();
				if (isValidDrop(e.dragInitiator, e.target))
				{
					DragManager.acceptDragDrop(e.target as UIComponent);
					DragManager.showFeedback(DragManager.MOVE);
				}
				else
				{
					DragManager.showFeedback(DragManager.NONE);
				}
			}
			private function onDragDrop(e:DragEvent):void
			{
				if (isValidDrop(e.dragInitiator, e.target))
				{
					if (e.target == AssignedRoles)
					{
						// Add role if it isn't already
						var name:String = AvailableRoles.selectedItem.toString();
						var role:RoleVO = new RoleVO();
						role.roleName = name;
						
						var event:UserEvent = new UserEvent(UserEvent.ADD_ROLE);
						event.role = role;
						dispatchEvent(event);
					}
					else if (e.target == AvailableRoles)
					{
						event = new UserEvent(UserEvent.REMOVE_ROLE);
						event.role = AssignedRoles.selectedItem as RoleVO;
						dispatchEvent(event);
					}
					filterAvailableRoles();
				}
				e.preventDefault();
			}
			private function isValidDrop(source:Object, destination:Object):Boolean
			{
				if (source == AssignedRoles &&
					destination == AvailableRoles)
					return true;
				if (source == AvailableRoles &&
					destination == AssignedRoles)
					return true;
				return false;
			}
			private function filterAvailableRoles():void
			{
				availableRoles.filterFunction = filterRoleFunction;
				availableRoles.refresh();
			}
			private function filterRoleFunction(roleName:String):Boolean
			{
				if (editUser != null &&
					editUser.roles != null)
				{
					for each (var r:RoleVO in editUser.roles)
					{
						if (roleName == r.roleName)
							return false;
					}
				}
				return true;
			}
		]]>
	</mx:Script>
		
		
		<mx:Form id="EditUser">
			<mx:FormItem label="UserName" required="true">
				<mx:Label text="{editUser.username}"/>
			</mx:FormItem >
			<mx:FormItem label="Name" width="450">
				<mx:TextInput id="Name" 
					text="{editUser.name}" width="332"/>
			</mx:FormItem>
			<mx:FormItem label="Email Address" >
				<mx:TextInput id="EmailAddress" 
					text="{editUser.emailAddress}" width="332"/>
			</mx:FormItem>
			<mx:FormItem label="Active">
				<mx:CheckBox id="IsActive" 
					selected="{editUser.isActive}" />
			</mx:FormItem>
			<mx:FormItem label="Roles" width="100%"
				visible="false"
				includeInLayout="false">
				<mx:HBox width="100%">
					<mx:Canvas width="100%" height="100%">
						<mx:Label text="Assigned Roles"
							top="0" left="0" />
						<mx:List id="AssignedRoles"
							dataProvider="{editUser.roles}"
							dragEnter="onDragEnter(event)"
							dragDrop="onDragDrop(event)"
							labelField="roleName"  width="100%" top="15" height="100" dragEnabled="true" dropEnabled="true"/>
					</mx:Canvas>
					<mx:Canvas width="100%" height="100%">
						<mx:Label text="Available Roles"
							top="0" left="0" />
						<mx:List id="AvailableRoles" 
							top="15"
							dataProvider="{availableRoles}"
							dragEnter="onDragEnter(event)"
							dragDrop="onDragDrop(event)"
							width="100%" height="100" dragEnabled="true" dropEnabled="true"/>
					</mx:Canvas>
				</mx:HBox>
			</mx:FormItem>
			<mx:FormItem label="Password" required="{isNewUser}">
				<mx:TextInput id="Password" displayAsPassword="true"  width="333"/>
			</mx:FormItem>	
			<mx:FormItem label="Confirm Password" required="{isNewUser}">
				<mx:TextInput id="ConfirmPassword" displayAsPassword="true"  width="333"/>				
			</mx:FormItem>
		</mx:Form>
		<mx:ControlBar horizontalAlign="right">
			<mx:Button id="SaveUser" label="Save" click="save()" />
		</mx:ControlBar>
</mx:TitleWindow>
