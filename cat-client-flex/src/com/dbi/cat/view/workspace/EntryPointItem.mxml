<?xml version="1.0" encoding="utf-8"?>
<Node xmlns="com.dbi.cat.view.workspace.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	implements="com.dbi.cat.view.workspace.ILayoutInfoItem"
	displayIcon="{entryPointIcon}"
	workspaceIcon="{entryPointIcon}"
	editWindowWidth="500"
	editWindowHeight="170"
	x="{nodeVO.layoutInfo.x}"
	y="{nodeVO.layoutInfo.y}" 
	creationComplete="init()"
	xmlns:controls="com.dbi.controls.*"
	label="Entry Point" 
	xmlns:components="com.dbi.cat.view.components.*">
	<mx:Script>
		<![CDATA[
			import mx.collections.IViewCursor;
			import com.dbi.cat.common.vo.EntryDataVO;
			import com.dbi.cat.common.constants.CampaignMode;
			import com.dbi.cat.common.vo.EntryPointDefinitionVO;
			import com.dbi.cat.common.vo.KeywordVO;
			import mx.collections.ArrayCollection;
			import com.dbi.cat.common.vo.CampaignVO;
			import com.dbi.cat.common.constants.EntryPointType;
			import com.dbi.cat.common.vo.LayoutInfoVO;
			import com.dbi.cat.common.vo.EntryPointVO;
			
			
			[Bindable(event="nodeUpdate")]
			public function get entryPointVO():EntryPointVO
			{
				return editNodeVO as EntryPointVO;
			}
			public function set entryPointVO(ep:EntryPointVO):void
			{
				nodeVO = ep;
				dispatchEvent(new Event("entryPointLoaded"));
			}
			public function get layoutInfo():LayoutInfoVO
			{
				return entryPointVO.layoutInfo;
			}
			public function set layoutInfo(info:LayoutInfoVO):void
			{
				entryPointVO.layoutInfo = info;
			}
			public function get voUID():String
			{
				return entryPointVO.uid;
			}
			
			override public function get valid():Boolean
			{
				return entryPointVO != null && entryPointVO.valid;
			}
			
			private function init():void
			{
				populateCurrent();
				updateEnabled();
			}
			
			private function populateCurrent():void
			{
				for (var i:Number = 0; i < allowedEntryPointTypes.length; i++)
				{
					EntryPoints[i].selectedIndex = -1;
					Keywords[i].selectedIndex = -1;
					
					var ed:EntryDataVO = getEntryData(allowedEntryPointTypes[i]);
					if (ed != null)
					{
						// Set checkbox
						EntryPointTypes[i].selected = true;
						
						// Set entry point
						for (var index:Number = 0; index < EntryPoints[i].dataProvider.length; index++)
						{
							if (EntryPoints[i].dataProvider[index].name == ed.entryPoint)
							{
								EntryPoints[i].selectedIndex = index;
								Keywords[i].dataProvider = getKeywords(ed.entryType, ed.entryPoint);
								Keywords[i].selectedIndex = -1;
								break;
							}
						}
						
						// Set keyword
						for (index = 0; index < Keywords[i].dataProvider.length; index++)
						{
							if (Keywords[i].dataProvider[index].keyword == ed.keyword)
							{
								Keywords[i].selectedIndex = index;
								break;
							}
						}
					}
				}
			}
			
			// List of entry points that are being shown
			[Bindable]
			private var allowedEntryPointTypes:Array = [
				EntryPointType.SMS, 
				EntryPointType.EMAIL, 
				EntryPointType.TWITTER];
			
			// Retrieve methods
			[Bindable(event="entryPointLoaded")]
			[Bindable(event="entryPointTypeChanged")]
			private function getEntryData(entryPointType:String):EntryDataVO
			{
				for each (var ed:EntryDataVO in entryPointVO.entryData)
				{
					if (ed.entryType == entryPointType)
						return ed;
				}
				return null;
			}
			
			// Keyword list
			private function getKeywords(entryPointType:String, address:String):ArrayCollection
			{
				return workspace.getClientKeywords(entryPointType, address);
			}
			
			// EntryPoint list
			private function getEntryPoints(entryPointType:String):ArrayCollection
			{
				return workspace.getClientEntryPoints(entryPointType);
			}
			
			// Update entry point data with all drop downs
			private function changeType():void
			{
				for (var i:Number = 0; i < allowedEntryPointTypes.length; i++)
				{
					// If item is found update or remove it
					var ed:EntryDataVO = getEntryData(allowedEntryPointTypes[i]);
					if (ed != null)
					{
						if (EntryPointTypes[i].selected)
						{
							var newEntryPoint:String = EntryPoints[i].selectedItem != null ? EntryPoints[i].selectedItem.name : null;
							if (ed.entryPoint != newEntryPoint)
							{
								ed.entryPoint = newEntryPoint;
								Keywords[i].dataProvider = getKeywords(ed.entryType, ed.entryPoint);
								Keywords[i].selectedIndex = -1;
							}
							ed.keyword = Keywords[i].selectedItem != null ? Keywords[i].selectedItem.keyword : null;
						}
						else
						{
							entryPointVO.entryData.removeItemAt(
								entryPointVO.entryData.getItemIndex(ed));
						}
					}
					// If item is not found and selected add it
					else if (EntryPointTypes[i].selected)
					{
						var newEd:EntryDataVO = new EntryDataVO();
						newEd.entryType = allowedEntryPointTypes[i];
						entryPointVO.entryData.addItem(newEd);
					}
				}
				updateEnabled();
			}
			private function updateEnabled():void
			{
				// Modify enabled state of drop downs
				for (var i:Number = 0; i < allowedEntryPointTypes.length; i++)
				{
					var selected:Boolean = EntryPointTypes[i].selected;
					EntryPoints[i].enabled = selected;
					Keywords[i].enabled = selected;
					
					if (!selected)
					{
						EntryPoints[i].selectedIndex = -1;
						Keywords[i].selectedIndex = -1;
					}
				}
			}
			
			private function updateKeywordLists():void
			{
				for (var i:Number = 0; i < Keywords.length; i++)
				{
					var address:String = EntryPoints[i].selectedItem != null ? EntryPoints[i].selectedItem.name : "";
					
					Keywords[i].dataProvider = getKeywords(EntryPointFormItem[i].label, address);
					Keywords[i].selectedIndex = -1;
				}
			}
			
		]]>
	</mx:Script>
	<editContent>
		<mx:Form right="0" left="0" top="0" bottom="0"   
			paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
			<mx:FormItem label="Title" 
				labelWidth="70" width="100%">
				<mx:TextInput id="Title"
					width="100%"
					text="{entryPointVO.name}"
					change="{entryPointVO.name = Title.text}" />
			</mx:FormItem>
			<mx:Repeater id="EntryPointRepeater"
				dataProvider="{allowedEntryPointTypes}">
				<mx:FormItem id="EntryPointFormItem"
					label="{EntryPointRepeater.currentItem}"
					labelWidth="70" width="100%"
					enabled="{workspace.campaign.mode != CampaignMode.TEMPLATE}">
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:CheckBox id="EntryPointTypes"
							change="changeType()"  />
						<mx:ComboBox id="EntryPoints"
							width="150"
							labelField="name"
							dataProvider="{getEntryPoints(EntryPointRepeater.currentItem.toString())}"
							change="{changeType()}" />
						<mx:Label text="Keyword" />
						<mx:ComboBox id="Keywords"
							width="150"
							labelField="keyword"
							change="{changeType()}" />
					</mx:HBox>
				</mx:FormItem>
			</mx:Repeater>
		</mx:Form>
	</editContent>
</Node>
