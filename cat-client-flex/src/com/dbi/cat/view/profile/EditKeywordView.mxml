<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" 
	width="406" height="200"
	showCloseButton="true"
	close="onClose()"
	title="Create Keyword"
	creationComplete="init()" xmlns:components="com.dbi.cat.view.components.*">
	<mx:Script>
		<![CDATA[
			import com.dbi.controls.CustomMessage;
			import com.dbi.cat.constants.KeywordAvailableCheckState;
			import com.dbi.cat.common.vo.KeywordLimitVO;
			import com.dbi.cat.common.constants.KeywordConstants;
			import com.dbi.cat.event.ClientEvent;
			import mx.collections.ArrayCollection;
			import com.dbi.cat.common.vo.ClientVO;
			import com.dbi.cat.common.vo.KeywordVO;
			import com.dbi.cat.common.vo.EntryPointDefinitionVO;
			
			[Embed("/assets/img/available.png")]
			private var availableIcon:Class;
			
			[Embed("/assets/img/unavailable.png")]
			private var unavailableIcon:Class;
			
			
			[Bindable]
			public var clients:ArrayCollection;
			
			[Bindable]
			public var currentKeyword:KeywordVO;
			
			[Bindable]
			public var keywords:ArrayCollection;
			
			private var _isKeywordAvailable:String;
			[Bindable]
			public function get isKeywordAvailable():String
			{
				return _isKeywordAvailable;
			}
			public function set isKeywordAvailable(value:String):void
			{
				_isKeywordAvailable = value;
				
				AvailableIndicator.visible = true;
				AvailableIndicator.toolTip = "";
				switch (isKeywordAvailable)
				{
					case KeywordAvailableCheckState.AVAILABLE:
						AvailableIndicator.source = availableIcon;
						AvailableIndicator.toolTip = "This keyword is available";
						break;
					case KeywordAvailableCheckState.UNAVAILABLE:
						AvailableIndicator.source = unavailableIcon;
						AvailableIndicator.toolTip = "This keyword is not available";
						break;
					default:
						AvailableIndicator.visible = false;
				}
			}
			
			[Bindable(event="changeAddress")]
			private function get usedCount():Number
			{
				var count:Number = 0;
				for each (var k:KeywordVO in keywords)
				{
					if (k.clientId == Client.selectedItem.clientId &&
					    k.incomingAddressType == Address.selectedItem.type)
						count++;
				}
				return count;
			}
			[Bindable(event="changeAddress")]
			private function get availableCount():Number
			{
				var ret:Number = KeywordConstants.DEFAULT_KEYWORD_LIMIT;
				for each (var limit:KeywordLimitVO in Client.selectedItem.keywordLimits)
				{
					if (limit.entryType == Address.selectedItem.type)
					{
						ret = limit.maxKeywords;
						break;
					}
				}
				return ret;
			}
			
			
			private function init():void
			{
				dispatchEvent(new Event("changeAddress"));
			}
			private function onClose():void
			{
				dispatchEvent(new ClientEvent(ClientEvent.CLOSE_EDIT_KEYWORD));
			}
			private function save():void
			{
				if (currentKeyword.keyword != null &&
					currentKeyword.keyword.length > 0)
				{
					if (availableCount > 0 &&
						usedCount >= availableCount)
					{
						CustomMessage.show("You have already reached your maximum " + availableCount + 
						" keywords for " + Address.selectedItem.type + " accounts.");
					}
					else
					{
						var event:ClientEvent = new ClientEvent(ClientEvent.SAVE_KEYWORD);
						currentKeyword.clientId = Client.selectedItem.clientId;
						currentKeyword.entryPointId = Address.selectedItem.primaryKey;
						event.keyword = currentKeyword;
						dispatchEvent(event);
					}
				}
			}
			private function checkAvailability():void
			{
				if (currentKeyword.keyword != null &&
					currentKeyword.keyword.length > 0)
				{
					var event:ClientEvent = new ClientEvent(ClientEvent.CHECK_KEYWORD_AVAILABILITY);
					currentKeyword.clientId = Client.selectedItem.clientId;
					currentKeyword.entryPointId = Address.selectedItem.primaryKey;
					event.keyword = currentKeyword;
					dispatchEvent(event);
				}
			}
			private function changeAddress():void
			{
				currentKeyword.entryPointId = Address.selectedItem.primaryKey;
				dispatchEvent(new Event("changeAddress"));
			}
			private function changeClient():void
			{
				currentKeyword.clientId = Client.selectedItem.clientId
				dispatchEvent(new Event("changeAddress"));
			}
		]]>
	</mx:Script>
	<mx:Form>
		<mx:FormItem label="Client">
			<components:FormattedComboBox id="Client"
				dataProvider="{clients}"
				change="{changeClient()}"
				labelField="name" />
		</mx:FormItem>
		<mx:FormItem label="Address">
			<mx:ComboBox id="Address"
				dataProvider="{Client.selectedItem.entryPoints}"
				change="{changeAddress()}"
				labelField="value" />
		</mx:FormItem>
		<mx:FormItem label="Keyword">
			<mx:TextInput id="Keyword"
				text="{currentKeyword.keyword}"
				change="{currentKeyword.keyword = Keyword.text;}" />
		</mx:FormItem>
		<mx:FormItem visible="{availableCount > 0}">
			<mx:Label text="{'Using ' + usedCount + ' of ' + availableCount + ' Available'}" />
		</mx:FormItem>
	</mx:Form>
	<mx:Button id="Check" label="Check Availability"
		click="checkAvailability()" y="72" right="10"/>
	<mx:Image id="AvailableIndicator" y="74" right="140"  width="16" height="16"/>
	<mx:ControlBar>
		<mx:Spacer width="100%" />
		<mx:Button id="Save" label="Save"
			click="save()"/>
	</mx:ControlBar>
</mx:TitleWindow>
